[
  {
    "slug": "sneaker-tracker",
    "name": "Sneaker Tracker",
    "year": "2019",
    "image": "sneaker-tracker.jpg",
    "status": "Developing",
    "info": "Sneaker Tracker is a search engine and a price tracker for sneakers. The application allows you to search for a specific shoe model and compare the prices for the different stores available in the database. You can also save a model in favorites, so when the price drops you’ll receive a notification by email.",
    "description": "For the implementation of the system, has been taken in cosideration, above all, the future flexibility of adding new stores to the database, so adding a new store to the application supposes the minimum possible effort. This has been achieved creating a generic interface for the scraper, which is capable of analyzing and extracting all the required business data.",
    "components": [
      {
        "name": "Scraper",
        "details": "Cron job that’s responsible of scraping all the sneakers from the available stores in database using Puppeteer running in headless mode. Once an sneaker is scraped, it sends the data to a RabbitMQ messaging queue. Another process will be responsible for processing the messages in the queue and for saving or updating the sneaker data in a MongoDB database. There’s also a process subscribed to the same queue that is responsible for notifying users through email in case an sneaker on your favorites list has dropped its price. In the future, there will be another responsible of indexing sneakers data in Elasticsearch to improve the full text search. This whole subsystem runs on Docker."
      },
      {
        "name": "REST API",
        "details": "API built on Nest.js that exposes the sneakers data in order to be consumed by the web application."
      },
      {
        "name": "Webapp",
        "details": "Being developed in React, allows users to search for sneakers by size and gender, as well as see the different prices for each store that has it available. It also allows users to add the different models of sneakers to their favorites list to be notified by email in case it drops its price in any of the available stores."
      }
    ],
    "techs": [
      "Node.js",
      "TypeScript",
      "Puppeteer",
      "RabbitMQ",
      "MongoDB",
      "Docker",
      "Nest.js",
      "React"
    ]
  },
  {
    "slug": "financial-manager",
    "name": "Financial Manager",
    "year": "2019",
    "image": "financial-manager.jpg",
    "info": "Financial Manager is an application that allows you to control personal expenses and incomes. I’ve begun to develop it mainly with the objectives of deep diving into serverless architectures and creating visually more complex web components than I’m used to (applying advanced CSS transitions, responding to touch events...). The application allows users to register, create expenses and incomes for days, create monthly budgets...",
    "description": "I’ve decided to use Ionic 3 for the mobile application due to its recent AppFlow platform, which allows live hot code updates in a very simple way, and Firebase for the backend. I’ve chosen Firebase for it’s push notifications in addition to all the analytics and statistics it provides to know the users behavior. The mobile application is responsible for invoking Cloud functions using the Firebase SDK, which interacts with the Firestore database and returns the requested data to the application.",
    "techs": [
      "Firebase",
      "TypeScript",
      "Ionic",
      "Angular",
      "Swagger"
    ]
  },
  {
    "slug": "apperta",
    "name": "Apperta",
    "year": "2018",
    "image": "apperta.jpg",
    "info": "Apperta is an application I’ve have built for a friend in my spare time for a month. It has been developed, above all, to experiment with Ionic and hybrid mobile applications. The goal was to build a similar application to TripAdvisor but limited in functionality. It allows users to register and search for restaurants, receive and publish ratings...",
    "description": "For its implementation, I’ve decided to create a mobile application with Cordoba and with Ionic 2, allowing the app publication in both the App Store and the Play Store. The application is powered by a REST API developed on Node.js and Express, which uses a MongoDB database to store the data. To upload images, Cloudinary has been choosen, a SaaS platform aimed to store digital content. For the backend deployment Heroku has been used.",
    "techs": [
      "Node.js",
      "Express",
      "MongoDB",
      "Ionic",
      "Angular",
      "Heroku"
    ]
  },
  {
    "slug": "sporter",
    "name": "Sporter",
    "year": "2017",
    "image": "sporter.jpg",
    "info": "Sporter is an application designed to connect nearby athletes, which I’ve developed as my degree final project. The objective was to get away from everything I had learned during the degree and learn technologies that really seemed interesting to me, although putting into practice other acquired knowledge related to testing, continuous integration and delivery, etc. The application allows registered users to create sporting events that other users can join before they start.",
    "description": "For its implementation I’ve decided to use Angular and Bootstrap for the front-end and Node.Js with Express and MongoDB for the back-end. The application also has notifications and chat in real time, for which Socket.io has been used. In addition, automated API testing using Mocha and Chai has been carried out and the entire API has been documented using API Blueprint. The Google Places API has been used for the location of the events and its subsequent search is done through geospatial queries from MongoDB. For the deployment a Codeship and Heroku pipeline has been created. After doing a push to the master branch of the back-end git repository, Codeship takes care of launching the automated tests and, in case of success, uploading the code coverage report to CodeClimate, as well as deploying the application to Heroku. For the front-end, Codeship is responsible only for making a build equal to the production one to detect possible errors and, in case of success, it’is also responsible for deploying the application to Heroku.",
    "techs": [
      "Node.js",
      "Express",
      "MongoDB",
      "Socket.io",
      "Mocha",
      "Angular",
      "Api Blueprint",
      "Codeship",
      "Heroku"
    ]
  }
]